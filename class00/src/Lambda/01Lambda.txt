자바는 OOP 객체지향 언어이다.
JDK 1.8부터 함수형 언어의 기능을 조금 추가시켰다.

Bigdata가 뜨면서 엄청난 양의 데이터를 처리하기 위해서 함수형 언어가 뜨기 시작했다.


#람다식(Lambda Expression)
	> 함수(메서드)를 간단한 식(expression)으로 표현하는 방법
		
		int max(int a, int b){
			return a>b ? a: b;
		}

	-> 람다식
		(a, b) -> a > b ? a : b
		
	> 익명 함수 ( anonymous function ) : 이름이 없다.
	
		위에서 보면 반환타입과 이름 지우고(int max) -> 화살표를 넣어주는 방식으로 만듬
		
	> 함수와 메서드의 차이
		-	근본적으로는 동일. 함수는 일반적인 용어이고 메서드는 객체지향개념 용어이다.
			함수는 클래스에 독립적, 메서드는 클래스에 종속적.
			근데 자바에서는 모든 메서드가 클래스에 종속되어있기때문에 전부 메서드라고 할 수 있다.
			

# 람다식 작성
	1. 메서드의 이름과 반환타입을 제거하고, ->을 추가한다.
		int max(int a, int b) { ... }  --> (int a, int b) -> { ... }
		
		람다식 함수(메서드)를 간단하게 표현한다!
		규칙들이 몇가지 있다.
	
	2. 반환 값이 있는 경우 return문 생략이 가능. ; 도 붙여주지 않아야 함
		(int a, int b)-> a>b?a:b
		return값 없고, {}도 없고. ;도 없고. return이 존재해야 함.
		
	3. 매개변수의 타입이 추론 가능하면 생략가능(대부분 생략 가능)
		(int a, int b) -> a>b?a:b
		(a, b) -> a>b?a:b 로 작성 가능

# 람다식 작성 주의사항
	1. 매개변수가 하나일 경우 괄호 생략 가능.
		(a) -> a * a 
		a -> a*a 작성 가능
	2. 블록 {} 안에 문장이 하나 일 경우 {} 생략 가능. ; 붙이면 안 됨
	(i) -> System.out.println(i)
	
	 
	 
	 

-----------------------------------------------------------------------------	 
람다식은 익명 함수? 익명 객체!
람다식은 익명 함수가 아니라 익명 객체이다!

자바에서는 메서드만 따로 존재할 수 없다.
자바에서는 익명 객체라고 생각해야 한다!

(a, b) -> a>b?a:b

-> new Object(){
	int max(int a, intb){
		return a>b?a:b;
	}
}
익명 클래스, 익명객체. 객체의 선언과 생성을 동시에!


객체입니다.

람다식(익명 객체)을 다루기 위한 참조변수가 필요하다.
참조변수의 타입은?

Object obj = new Object(){
	int max(int a, inb){
		return a>b?a:b;
	}	
};


타입 obj = (a, b) -> a> b? a:b; //어떤 타입?인가요?
Object를 쓰나요?

int value = obj.max(3, 5);// 에러! Object에서는 max()가 없음.

그러면 결국 int max를 사용불가능하게 됨. 호출 불가능

