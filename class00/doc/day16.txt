//★
//내부클래스, 
# day16

▶▶▶▶내부 클래스
==> 클래스 내부에 다시 클래스를 만들 수 있다.

종류

	1. Top Level Inner Class
		==> 비록 형식은 내부 클래스이지만 독립적으로 활동하는 클래스
		
		형식 ]
		
			static class 클래스이름{ 	// static? 먼저 static영역에 올리고 시작,
			}							// 딱 한번만 올라감, 공통사용 
										// this=>heap에 올린 거 기억. 얘는 this 못 씀!
										
		다시말해서 클래스 내부에 만들면서 static이 붙으면 Top Level Class가 된다.
		
		참고 ]
			클래스이름
			
			일반클래스와 달리 내부클래스의 이름은
			"바깥클래스이름.내부클래스이름" 형식을 취한다. @.,@
	
	***		
	2. 전역 Inner Class
		==> 일반 클래스를 내부클래스로 만든 것.
			(이 클래스를 우리가 내부클래스라고 부르는 것의 90%를 차지한다.)
			
		형식 ]
			
			class 클래스이름 {
			}
			
		특징 ]
			1. 바깥클래스의 모든 멤버를
				자기것처럼 사용할 수 있다.
				
					<==
					
						public class T01 {
							int no;			//no 전역이어서 클래스에서 사용가능
							void abc(){		//함수도 이용 가능
							}
							
							class T01_01{
							no = 100;
							abc();
							}
						}
						
			2. 반드시 바깥 클래스가 new된 이후에 안쪽 클래스를 생성할 수 있다.
				//내부 클래스가 바깥 클래스의 멤버로 등록되어있다고 생각하면 됨.
				
				형식 ]
					
					바깥클래스주소(변수).new 안쪽 클래스이름();
					
					예 ]
						T01 t = new T01();
						T01.T01_01 t1 = t.new T01_01();
						
						= > new T01. new T01_01();
						
						
			3. 바깥 클래스는 안쪽 클래스의 멤버를 사용할 수 없고
			(지역변수 사용할 수 없는 것과 같은 이치)
			사용하기 위해서는 new시켜서 사용해야 한다.
			
		바깥 클래스와 연관된 기능을 가진 클래스를 만들고 싶을 때
		주로 사용하는 기법  
			
		
	3. 지역 Inner Class
		==> 내부 클래스를 만드는 위치가 바깥 클래스의 함수 내부에서 만드는 경우
			그 클래스를 지역 내부클래스라 부른다.
			
			class Test{
				int a;				-->		전역 변수
				
				class Inner01{		-->		전역 내부 클래스
				}
				
				void abc(){
					int b			-->		지역 변수
					//void xyz();	-->		? 자바 내부에 함수 만들기 x
					class Inner02{	-->		진역 내부 클래스
					}
				}
				
				
			참고 ]
				int no = IntegerInt(sc.nextLine());
				의 경우 매개변수에 함수 자체를 입력하는 것이 아니고
				함수 실행의 결과 만들어지는 데이터를 입력하는 것이 된다.
				
			특징 ]
				1.	전역 내부 클래스와 유사하게 바깥 클래스의 멤버를 모두 사용할 수 있다.
				2.	이 클래스는 다른 곳에서 new 시킬 수 없다.
					오직 해당 함수 내에서만 new 시킬 수 있다.
					
	4.	무명 Inner Class
			==> 이름이 없는 내부 클래스를 말한다.
			
				프로그램을 만들다 보면
				클래스의 기능 수정을 위해서 오버라이드를 해야하는 경우가 발생한다.
				(또는 어쩔 수 없이 오버라이드를 해야하는 경우도 있다.
				  추상클래스, 인터페이스의 경우 반드시 오버라이드 해야한다.)
				
				이 때 간단한 오버라이드를 해야하는 경우
				그 기능 하나 때문에 클래스를 따로 만들어야하는 불편함이 있다.
				
				예를 들어 프로그램을 강제로 종료한느 명령은
					System.exit(0);
				인데 이 한줄을 쓰기 위해서 클래스를 다시 만들어야 한다.
				
				결론적으로
				무명 클래스란?
				바로 이런 경우를 위해 만들어진 클래스로
				클래스를 new 시키는 순간 필요한 기능을 오버라이드해서 사용하는 방법
				즉, 사용자가 클래스 이름을 만들지 않아도 된다... 라는 의미에서 무명이라고 부른다.
				
				형식 ]
					
					new 상속해줄 클래스이름(){	//===> 상위클래스
						함수오버라이드..
					}
				
				